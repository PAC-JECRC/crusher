const playwright = require("<%= usePlaywrightChromium ? "playwright-chromium" : "playwright" %>");
const path = require("path");

const { CrusherRunnerActions, handlePopup, getBrowserActions, getMainActions } = require("<%= runnerUtilsPackagePath %>");

// @TODO: globalManager, logManager and storageManager are supposed to be injected globally
const crusherRunnerActionManager = new CrusherRunnerActions(logManager, storageManager, "<%= baseAssetsPath %>", globalManager);

const browser = await playwright["<%= browserName %>"].launch(<%- JSON.stringify(defaultBrowserLaunchOptions) %>);
let capturedVideo, browserContext, page;
try {
globalManager.set("browserContextOptions", <%- JSON.stringify(defaultBrowserContextOptions) %>);

const actions = <%- JSON.stringify(actions) %>
await crusherRunnerActionManager.runActions(getBrowserActions(actions), browser);

browserContextOptions = globalManager.get("browserContextOptions");

browserContext = await browser.newContext({
  ...browserContextOptions,
});

browserContext.setDefaultNavigationTimeout(browserContextOptions.defaultNavigationTimeout);
browserContext.setDefaultTimeout(browserContextOptions.defaultTimeout);

page = await browserContext.newPage({});
await handlePopup(page, browserContext);


await crusherRunnerActionManager.runActions(getMainActions(actions), browser, page);
} catch(ex) {
  <% if (shouldRecordVideo) { %>
  globalManager.set("recordedVideoPath", await page.video().path());
  <% } %>
  await page.close();
  await browserContext.close();
  await browser.close();
  throw ex;
}

<% if (shouldRecordVideo) { %>
globalManager.set("recordedVideoPath", await page.video().path());
<% } %>
await page.close();
await browserContext.close();
await browser.close();
