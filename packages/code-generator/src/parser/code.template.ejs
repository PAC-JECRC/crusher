const playwright = require("<%= usePlaywrightChromium ? "playwright-chromium" : "playwright" %>");
const path = require("path");
<% if (shouldRecordVideo) { %>
const { saveVideo } = require("playwright-video");
<% } %>

const { CrusherRunnerActions, handlePopup, registerCrusherSelectorEngine, getBrowserActions, getMainActions } = require("<%= runnerUtilsPackagePath %>");

// @TODO: globalManager, logManager and storageManager are supposed to be injected globally
const crusherRunnerActionManager = new CrusherRunnerActions(logManager, storageManager, "<%= baseAssetsPath %>", globalManager);

const browser = await playwright["<%= browserName %>"].launch(<%- JSON.stringify(defaultBrowserLaunchOptions) %>);
let capturedVideo;
try {
globalManager.set("browserContextOptions", <%- JSON.stringify(defaultBrowserContextOptions) %>);

const actions = <%- JSON.stringify(actions) %>
crusherRunnerActionManager.runActions(getBrowserActions(actions), browser);

browserContextOptions = globalManager.get("browserContextOptions");

browserContext = await browser.newContext({
  ...browserContextOptions,
});

browserContext.setDefaultNavigationTimeout(browserContextOptions.defaultNavigationTimeout);
browserContext.setDefaultTimeout(browserContextOptions.defaultTimeout);

const page = await browserContext.newPage({});
await handlePopup(page, browserContext);
await registerCrusherSelectorEngine();
<% if (shouldRecordVideo) { %>
capturedVideo = await saveVideo(page, path.join("<%= videoSavePath %>", "video.mp4"));
<% } %>

await crusherRunnerActionManager.runActions(getMainActions(actions), browser, page);
} catch(ex) {
  <% if (shouldRecordVideo) { %>
    capturedVideo && await capturedVideo.stop();
  <% } %>
  await browser.close();
  throw ex;
}
