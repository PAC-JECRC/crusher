name: Deploy Crusher Server

on:
  release:
    types: [published, edited]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.4
        with:
          node-version: 14.15.4

      - name: Install yarn
        run: npm install -g yarn

      - name: Use cache for yarn if available
        uses: c-hive/gha-yarn-cache@v1

      - name: Create ecosystem.config.js
        run: cp ecosystem.config.sample.js ecosystem.config.js

      - name: Copy .env.sample file
        run: cp .env.sample .env

      - name: Install crusher modules
        run: yarn

      - name: Setup crusher
        run: yarn setup:prod


      - name: Upgrade heap size of node
        run: export NODE_OPTIONS=--max_old_space_size=4096

      - name: Package crusher-server for deployment
        run: sh scripts/build/build-crusher-server.sh
        env:
          NODE_OPTIONS: --max_old_space_size=4096

      - name: Delete main node_modules
        run: rm -R node_modules

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          CRUSHER_ENV: production
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: crusher-server-images
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --file docker/ee/crusher-server/Dockerfile
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
