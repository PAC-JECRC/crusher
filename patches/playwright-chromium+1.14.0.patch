diff --git a/node_modules/playwright-chromium/lib/server/chromium/videoRecorder.js b/node_modules/playwright-chromium/lib/server/chromium/videoRecorder.js
index 3d26ef6..02a0d27 100644
--- a/node_modules/playwright-chromium/lib/server/chromium/videoRecorder.js
+++ b/node_modules/playwright-chromium/lib/server/chromium/videoRecorder.js
@@ -15,6 +15,8 @@ var _progress = require("../progress");
 
 var _instrumentation = require("../instrumentation");
 
+const { PassThrough } = require('stream');
+const fs = require("fs");
 /**
  * Copyright (c) Microsoft Corporation.
  *
@@ -57,6 +59,7 @@ class VideoRecorder {
     this._ffmpegPath = void 0;
     this._progress = progress;
     this._ffmpegPath = ffmpegPath;
+    this._stream = new PassThrough();
     page.on(_page.Page.Events.ScreencastFrame, frame => this.writeFrame(frame.buffer, frame.timestamp));
   }
 
@@ -91,38 +94,23 @@ class VideoRecorder {
     // "-an" means no audio.
     const w = options.width;
     const h = options.height;
-    const args = `-loglevel error -f image2pipe -c:v mjpeg -i - -y -an -r ${fps} -c:v vp8 -qmin 0 -qmax 50 -crf 8 -deadline realtime -b:v 1M -vf pad=${w}:${h}:0:0:gray,crop=${w}:${h}:0:0`.split(' ');
-    args.push(options.outputFile);
     const progress = this._progress;
-    const {
-      launchedProcess,
-      gracefullyClose
-    } = await (0, _processLauncher.launchProcess)({
-      command: this._ffmpegPath,
-      args,
-      stdio: 'stdin',
-      log: message => progress.log(message),
-      tempDirectories: [],
-      attemptToGracefullyClose: async () => {
-        progress.log('Closing stdin...');
-        launchedProcess.stdin.end();
-      },
-      onExit: (exitCode, signal) => {
-        progress.log(`ffmpeg onkill exitCode=${exitCode} signal=${signal}`);
+    const writeStream = fs.createWriteStream(options.outputFile);
+    this._stream.pipe(writeStream);
+    this._stream.on('error', function (e) {
+      progress.log(`video error`);
+      // do not reject as a result of not having frames
+      if (
+        !this._lastFrameBuffer &&
+          e.message.includes('pipe:0: End of file')
+      ) {
+        return;
       }
+      progress.log(`pw-video: error capturing video: ${e.message}`);
     });
-    launchedProcess.stdin.on('finish', () => {
-      progress.log('ffmpeg finished input.');
-    });
-    launchedProcess.stdin.on('error', () => {
-      progress.log('ffmpeg error.');
-    });
-    this._process = launchedProcess;
-    this._gracefullyClose = gracefullyClose;
   }
 
   writeFrame(frame, timestamp) {
-    (0, _utils.assert)(this._process);
     if (this._isStopped) return;
 
     this._progress.log(`writing frame ` + timestamp);
@@ -146,9 +134,7 @@ class VideoRecorder {
   }
 
   async _sendFrame(frame) {
-    return new Promise(f => this._process.stdin.write(frame, f)).then(error => {
-      if (error) this._progress.log(`ffmpeg failed to write: ${error}`);
-    });
+    return this._stream.write(frame);
   }
 
   async stop() {
@@ -156,7 +142,7 @@ class VideoRecorder {
     this.writeFrame(Buffer.from([]), this._lastFrameTimestamp + ((0, _utils.monotonicTime)() - this._lastWriteTimestamp) / 1000);
     this._isStopped = true;
     await this._lastWritePromise;
-    await this._gracefullyClose();
+    await this._stream.end();
   }
 
 }
